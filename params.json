{"name":"FitsTableJS","body":"fitsTableJS\r\n=============\r\n\r\nYes, a JavaScript library for reading FITS Binary Tables :)\r\n\r\nDependencies\r\n------------\r\nThis library is dependent upon jDataView\r\n\r\n* https://github.com/vjeux/jDataView\r\n\r\nInstallation\r\n------------\r\nInclude the dependent library and fitsTableJS\r\n\r\n    <script src=\"path/to/jdataview.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\r\n    <script src=\"path/to/fitsTable.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\r\n\r\nUsage\r\n-----\r\nUsing an XMLHttpRequest, retrieve an array buffer or binary string of the FITS file.\r\n\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open('GET', \"url/to/shazaam.fits\", true);\r\n    xhr.responseType = 'arraybuffer';\r\n    xhr.onload = function(e) {\r\n        var ft = new FitsTable(xhr.response);\r\n    };\r\n    xhr.send();\r\n\r\n    // The header must be read first\r\n    ft.readHeader();\r\n\r\n    // Then we may read the columns\r\n    ft.readColumns();\r\n\r\n    // Access the data\r\n    console.log(ft.data);\r\n\r\n    // Column names are recorded as an array\r\n    console.log(ft.columnNames);\r\n\r\n    // Number of rows and columns\r\n    console.log(ft.rows);\r\n    console.log(ft.columns);\r\n\r\n    // You can read a single row at a time and access the data\r\n    ft.readColumn();\r\n    console.log(ft.data);\r\n\r\nNotes for me\r\n------------\r\n\r\nThese are the fields that describe the columns and data format in the test data.\r\n\r\n* TTYPE1  = 'flux    '\r\n* TFORM1  = 'D       '\r\n* TTYPE2  = 'best_fit'\r\n* TFORM2  = 'D       '\r\n* TTYPE3  = 'wavelength'\r\n* TFORM3  = 'D       '\r\n* TTYPE4  = 'and_mask'\r\n* TFORM4  = 'J       '\r\n* TTYPE5  = 'or_mask '\r\n* TFORM5  = 'J       '\r\n* TTYPE6  = 'inverse_variance'\r\n* TFORM6  = 'D'\r\n\r\nHow we do it\r\n------------\r\n* Parse for the FITS header\r\n* Read the above key/values\r\n* Unpack the binary data using jDataView\r\n\r\nTODO:\r\n-----\r\n\r\nSupport the follow data types that appear in FITS binary tables:\r\n\r\n<table>\r\n    <tr>\r\n        <td>FITS format code</td>\r\n        <td>Description</td>\r\n        <td>Number of 8-bit bytes</td>\r\n    </tr>\r\n    <tr>\r\n        <td>L*</td>\r\n        <td>logical (Boolean)</td>\r\n        <td>1</td>\r\n    </tr>\r\n    <tr>\r\n        <td>X*</td>\r\n        <td>bit</td>\r\n        <td>*</td>\r\n    </tr>\r\n    <tr>\r\n        <td>B</td>\r\n        <td>Unsigned byte</td>\r\n        <td>1</td>\r\n    </tr>\r\n    <tr>\r\n        <td>I</td>\r\n        <td>16-bit integer</td>\r\n        <td>2</td>\r\n    </tr>\r\n    <tr>\r\n        <td>J</td>\r\n        <td>32-bit integer</td>\r\n        <td>4</td>\r\n    </tr>\r\n    <tr>\r\n        <td>K*</td>\r\n        <td>64-bit integer</td>\r\n        <td>4</td>\r\n    </tr>\r\n    <tr>\r\n        <td>A</td>\r\n        <td>character</td>\r\n        <td>1</td>\r\n    </tr>\r\n    <tr>\r\n        <td>E</td>\r\n        <td>single precision floating point</td>\r\n        <td>4</td>\r\n    </tr>\r\n    <tr>\r\n        <td>D</td>\r\n        <td>double precision floating point</td>\r\n        <td>8</td>\r\n    </tr>\r\n    <tr>\r\n        <td>C*</td>\r\n        <td>single precision complex</td>\r\n        <td>8</td>\r\n    </tr>\r\n    <tr>\r\n        <td>M*</td>\r\n        <td>double precision complex</td>\r\n        <td>16</td>\r\n    </tr>\r\n    <tr>\r\n        <td>P*</td>\r\n        <td>array descriptor</td>\r\n        <td>8</td>\r\n    </tr>\r\n</table>\r\n\\* Not yet implemented or not yet tested\r\n\r\nReferences\r\n----------\r\nhttp://packages.python.org/pyfits/users_guide/users_table.html\r\n\r\nBAM!","tagline":"JavaScript library for parsing FITS binary tables","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}